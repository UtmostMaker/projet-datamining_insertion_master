import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import joblib
import warnings
import requests

# =============================================================================
# 1. CONFIGURATION DE LA PAGE
# =============================================================================
st.set_page_config(
    page_title="Data Mining : Insertion des Masters",
    page_icon="üöÄ",
    layout="wide",
)
warnings.filterwarnings("ignore", category=FutureWarning)

st.markdown("""
<style>
    .reportview-container { background: #0E1117; }
    .stMetric { border-left: 5px solid #007bff; padding: 1rem;
                border-radius: 0.5rem; background-color: #262730; }
    .stTabs [data-baseweb="tab-list"] { gap: 4px; }
    .stTabs [data-baseweb="tab"] {
        height: 55px; white-space: pre-wrap; background-color: #1a1a2e;
        border-radius: 6px 6px 0px 0px; border: 1px solid #3c3c5a;
        padding: 10px 18px; font-size: 15px; font-weight: bold;
    }
    .stTabs [aria-selected="true"] {
        background-color: #262730; color: #ffffff;
        border-bottom: 3px solid #007bff;
    }
</style>
""", unsafe_allow_html=True)


# =============================================================================
# 2. FONCTIONS DE CHARGEMENT AVEC CACHE
# =============================================================================
@st.cache_data
def load_data(path):
    df = pd.read_csv(path)
    df['qualite_emploi'] = pd.Categorical(df['qualite_emploi'], categories=['Standard', '√âlev√©e', 'Excellente'], ordered=True)
    df['parite'] = pd.Categorical(df['parite'], categories=['Majorit√© Masculine', 'Mixte', 'Majorit√© F√©minine'], ordered=True)
    df['cluster'] = df['cluster'].astype(str)
    return df

@st.cache_resource
def load_model(path):
    return joblib.load(path)

# =============================================================================
# 3. CHARGEMENT INITIAL DES DONN√âES ET RESSOURCES
# =============================================================================
try:
    df = load_data('insertion_pro_master_final_v2.csv')
    model_regression = load_model('salary_predictor_model.joblib')
    wordcloud_img1 = Image.open("wordcloud_article1.png")
    wordcloud_img2 = Image.open("wordcloud_article2.png")
    geojson_url = "https://france-geojson.gregoiredavid.fr/repo/regions.geojson"
    geojson = requests.get(geojson_url).json()
except Exception as e:
    st.error(f"‚ùå Fichier manquant ou erreur de chargement : {e}. Veuillez ex√©cuter le notebook `data_management.ipynb` et v√©rifier votre connexion.")
    st.stop()


# =============================================================================
# 4. BARRE LAT√âRALE DE CONTR√îLE
# =============================================================================
with st.sidebar:
    st.title("üöÄ Centre de Contr√¥le")
    st.write("Filtrez l'analyse pour explorer les donn√©es.")
    years = sorted(df['annee_diplome'].unique(), reverse=True)
    years_list = ['Toutes les ann√©es'] + years
    selected_year = st.selectbox("Ann√©e du dipl√¥me", options=years_list)
    regions_list = ['France enti√®re'] + sorted(df['region'].unique().tolist())
    selected_region = st.selectbox("R√©gion", options=regions_list)

# =============================================================================
# 5. LOGIQUE DE FILTRAGE
# =============================================================================
if selected_year == 'Toutes les ann√©es':
    df_filtered = df.copy()
else:
    df_filtered = df[df['annee_diplome'] == selected_year]
if selected_region != 'France enti√®re':
    df_filtered = df_filtered[df_filtered['region'] == selected_region]

# =============================================================================
# 6. INTERFACE PRINCIPALE
# =============================================================================
st.title("Projet de Data Mining : Analyse de l'Insertion des Masters")

tabs = st.tabs([
    "üè† Accueil", "üìä Vue d'Ensemble", "üì∞ Analyse de Presse",
    "üó∫Ô∏è G√©ographie", "üë• Analyse Sociale", "‚ú® Clustering",
    "üß† Pr√©diction", "üóÉÔ∏è Exploration"
])

# --- Onglet Accueil ---
with tabs[0]:
    st.header("Objectif du Projet et M√©thodologie")
    st.markdown("Ce dashboard est une application de la m√©thodologie **CRISP-DM** visant √† analyser en profondeur les d√©bouch√©s des dipl√¥m√©s de Master en France. L'objectif est de transformer des donn√©es brutes en **insights strat√©giques**.")
    st.subheader("Cr√©ation de Variables Strat√©giques")
    st.success("**1. Grand Domaine :** Agr√©gation intelligente des disciplines.")
    st.success("**2. Indice d'Attractivit√© :** Score combinant salaire (60%) et insertion (40%).")
    st.success("**3. Qualit√© de l'Emploi :** Indice qualitatif (stabilit√©, statut cadre).")
    st.success("**4. Parit√© :** Cat√©gorisation de la part de femmes.")
    st.success("**5. R√©gion administrative :** Mapping des acad√©mies vers les r√©gions.")

# --- Onglet Vue d'Ensemble du Dataset ---
with tabs[1]:
    st.header("Pr√©sentation du Jeu de Donn√©es")
    st.markdown(f"Les donn√©es couvrent **{df['annee_diplome'].nunique()} ann√©es** (de {df['annee_diplome'].min()} √† {df['annee_diplome'].max()}), et concernent **{df.shape[0]:,}** observations apr√®s nettoyage.")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Distribution par Ann√©e")
        st.bar_chart(df['annee_diplome'].value_counts().sort_index())
    with col2:
        st.subheader("Distribution par Domaine")
        domain_counts = df['grand_domaine'].value_counts()
        fig_pie = px.pie(domain_counts, values=domain_counts.values,
                         names=domain_counts.index, title="R√©partition")
        st.plotly_chart(fig_pie, use_container_width=True)
    st.dataframe(df.head(10))

# --- Onglet Analyse de Presse ---
with tabs[2]:
    st.header("Analyse Comparative de la Presse (Text Mining)")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Vue G√©n√©rale (Le Monde)")
        st.image(wordcloud_img1, use_container_width=True)
        with st.expander("Lire le r√©sum√© et voir la source"):
            st.markdown("**R√©sum√© :** L'article souligne une conjoncture tr√®s positive en 2022, avec un taux d'emploi record pour les masters (93%) et des salaires en hausse, malgr√© l'inflation.\n\n**Source :** [Le Monde](https://www.lemonde.fr/campus/article/2023/12/13/l-insertion-professionnelle-des-jeunes-diplomes-a-atteint-un-niveau-record-en-2022_6205561_4401467.html)")
    with col2:
        st.subheader("Focus Social (APEC)")
        st.image(wordcloud_img2, use_container_width=True)
        with st.expander("Lire le r√©sum√© et voir la source"):
            st.markdown("**R√©sum√© :** L'APEC nuance ce tableau en pointant des difficult√©s persistantes pour les jeunes femmes. Elles acc√®dent moins souvent au statut cadre et aux CDI, et un √©cart de salaire demeure.\n\n**Source :** [APEC](https://www.apec.fr/recruteur/marche-emploi/les-etudes-de-lapec/toutes-les-etudes/insertion-des-jeunes-diplomes-2024.html)")

# --- Onglet Analyse G√©ographique ---
with tabs[3]:
    st.header(f"Analyse G√©ographique ({selected_region}, {selected_year})")
    options = ['Tous les domaines'] + df_filtered['grand_domaine'].unique().tolist()
    sel_domain = st.selectbox("Affiner par Grand Domaine :", options=options)
    df_geo = df_filtered[df_filtered['grand_domaine'] == sel_domain] if sel_domain != 'Tous les domaines' else df_filtered
    st.subheader(f"Carte de l'Indice d'Attractivit√© ({sel_domain})")
    col_map, col_domtom = st.columns([3, 1])
    with col_map:
        st.markdown("**France M√©tropolitaine**")
        map_data = df_geo.groupby('region')['indice_attractivite'].mean().reset_index()
        fig_map = px.choropleth(map_data, geojson=geojson, featureidkey="properties.nom", locations="region", color="indice_attractivite", color_continuous_scale="Viridis", scope="europe", labels={'indice_attractivite': "Indice"})
        fig_map.update_geos(fitbounds=False, visible=False, center={"lat": 46.8, "lon": 2.35}, projection_scale=4.5)
        fig_map.update_layout(margin={"r":0,"t":0,"l":0,"b":0}, height=500)
        st.plotly_chart(fig_map, use_container_width=True)
    with col_domtom:
        st.markdown("**Outre-mer**")
        domtom_list = ['Guadeloupe', 'Guyane', 'Martinique', 'Mayotte', 'La R√©union']
        df_domtom = df_filtered[df_filtered['region'].isin(domtom_list)]
        if not df_domtom.empty:
            domtom_data = df_domtom.groupby('region')['indice_attractivite'].mean().sort_values().reset_index()
            fig_domtom = px.bar(domtom_data, y='region', x='indice_attractivite', orientation='h', color='indice_attractivite', color_continuous_scale="Viridis", labels={'region': '', 'indice_attractivite': "Indice"})
            fig_domtom.update_layout(height=500, yaxis_title=None)
            st.plotly_chart(fig_domtom, use_container_width=True)

# --- Onglet Analyse Sociale ---
with tabs[4]:
    st.header(f"Analyses Sectorielles et Sociales ({selected_region}, {selected_year})")
    st.subheader("Positionnement Strat√©gique des Grands Domaines")
    st.info("**Comment lire ce graphique ?** Chaque bulle est un domaine. L'id√©al est en haut √† droite (haut salaire, haute insertion).")
    domain_agg = df_filtered.groupby('grand_domaine').agg(salaire_moyen=('salaire_median', 'mean'), insertion_moyenne=('taux_insertion', 'mean'), effectif=('discipline', 'count')).reset_index()
    fig_bubble = px.scatter(domain_agg, x="insertion_moyenne", y="salaire_moyen", size="effectif", color="grand_domaine", hover_name="grand_domaine", size_max=60, labels={"insertion_moyenne": "Taux d'Insertion Moyen (%)", "salaire_moyen": "Salaire M√©dian Moyen (‚Ç¨)"})
    st.plotly_chart(fig_bubble, use_container_width=True)
    st.markdown("---")
    st.subheader("Analyse de la Qualit√© de l'Emploi par Domaine")
    st.info("**Comment lire ce graphique ?** Chaque barre repr√©sente 100% d'un domaine. On y voit la part des emplois de qualit√© 'Standard', '√âlev√©e' ou 'Excellente'.")
    quality_data = df_filtered.groupby(['grand_domaine', 'qualite_emploi']).size().unstack(fill_value=0)
    quality_data_percent = quality_data.div(quality_data.sum(axis=1), axis=0)
    fig_quality = px.bar(quality_data_percent, x=quality_data_percent.index, y=quality_data_percent.columns, labels={"x": "Grand Domaine", "value": "Pourcentage", "variable": "Qualit√© de l'Emploi"}, color_discrete_map={"Standard": "#636EFA", "√âlev√©e": "#00CC96", "Excellente": "#FFA15A"})
    fig_quality.update_layout(yaxis_tickformat=".0%", yaxis_title="R√©partition en %", barmode='stack', legend_title="Qualit√©")
    st.plotly_chart(fig_quality, use_container_width=True)
    st.markdown("---")
    st.subheader("Salaires et Parit√© par Domaine")
    st.info("**Comment lire ce graphique ?** Chaque bo√Æte montre la distribution des salaires pour une cat√©gorie. Cela permet de voir si, au sein d'un m√™me domaine, les fili√®res majoritairement f√©minines, mixtes ou masculines ont des perspectives salariales diff√©rentes.")
    df_gender = df_filtered.dropna(subset=['parite'])
    if not df_gender.empty:
        fig_box = px.box(df_gender, x="grand_domaine", y="salaire_median", color="parite", category_orders={"parite": ['Majorit√© Masculine', 'Mixte', 'Majorit√© F√©minine']}, labels={"grand_domaine": "", "salaire_median": "Distribution des Salaires (‚Ç¨)", "parite": "Parit√©"})
        st.plotly_chart(fig_box, use_container_width=True)

# --- Onglet Clustering ---
with tabs[5]:
    st.header("Data Mining Descriptif : Segmentation par Clustering K-Means")
    st.markdown("Nous avons utilis√© **K-Means** pour regrouper les acad√©mies en 4 profils distincts sur la base de leurs performances globales.")
    
    cluster_names = {'0': "P√¥les d'Excellence", '1': "R√©gions en D√©veloppement", '2': "Acad√©mies Sp√©cifiques", '3': "P√¥les Dynamiques"}
    cluster_colors = {"P√¥les d'Excellence": "#EF553B", "R√©gions en D√©veloppement": "#636EFA", "Acad√©mies Sp√©cifiques": "#00CC96", "P√¥les Dynamiques": "#AB63FA"}

    st.subheader("1. La G√©ographie des Clusters")
    st.info("Cette carte colore chaque r√©gion selon le profil dominant de ses acad√©mies. Elle r√©v√®le des ensembles g√©ographiques coh√©rents.")
    
    region_cluster = df.groupby('region')['cluster'].agg(lambda x: x.mode()[0]).reset_index()
    region_cluster['Nom du Cluster'] = region_cluster['cluster'].map(cluster_names)
    
    fig_map_cluster = px.choropleth(
        region_cluster, geojson=geojson, featureidkey="properties.nom",
        locations="region", color="Nom du Cluster",
        color_discrete_map=cluster_colors,
        scope="europe", labels={'Nom du Cluster': "Profil"}
    )
    fig_map_cluster.update_geos(fitbounds=False, visible=False, center={"lat": 46.8, "lon": 2.35}, projection_scale=4.5)
    fig_map_cluster.update_layout(margin={"r":0,"t":0,"l":0,"b":0}, height=500)
    st.plotly_chart(fig_map_cluster, use_container_width=True)

    with st.expander("Cliquez ici pour comprendre la signification de chaque profil"):
        st.markdown("""
        - **<span style='color:#EF553B;'>P√¥les d'Excellence</span> :** Salaires les plus bas mais stabilit√© d'emploi correcte.
        - **<span style='color:#636EFA;'>R√©gions en D√©veloppement</span> :** Salaires et taux d'insertion l√©g√®rement inf√©rieurs √† la moyenne.
        - **<span style='color:#00CC96;'>Acad√©mies Sp√©cifiques</span> :** Salaires les plus √©lev√©s (typiquement l'√éle-de-France).
        - **<span style='color:#AB63FA;'>P√¥les Dynamiques</span> :** Le meilleur √©quilibre avec les meilleurs taux d'insertion et de stabilit√©.
        """, unsafe_allow_html=True)

    st.markdown("---")
    st.subheader("2. L'ADN de chaque Cluster")
    st.info("Pour une lecture claire, les m√©triques sont pr√©sent√©es sur deux graphiques avec des √©chelles adapt√©es.")
    
    cluster_centers = df.groupby('cluster').agg(
        salaire_median=('salaire_median', 'mean'),
        taux_insertion=('taux_insertion', 'mean'),
        taux_emploi_stable=('taux_emploi_stable', 'mean')
    ).reset_index()
    cluster_centers['Nom du Cluster'] = cluster_centers['cluster'].map(cluster_names)
    
    col1, col2 = st.columns(2)
    with col1:
        fig_sal = px.bar(
            cluster_centers, x='Nom du Cluster', y='salaire_median',
            title="Comparaison des Salaires M√©dians",
            labels={'Nom du Cluster': '', 'salaire_median': 'Salaire M√©dian Moyen (‚Ç¨)'},
            color='Nom du Cluster', color_discrete_map=cluster_colors
        )
        fig_sal.update_layout(showlegend=False)
        st.plotly_chart(fig_sal, use_container_width=True)
    with col2:
        melted_rates = cluster_centers.melt(
            id_vars='Nom du Cluster', value_vars=['taux_insertion', 'taux_emploi_stable']
        )
        fig_rates = px.bar(
            melted_rates, x='Nom du Cluster', y='value', color='variable',
            barmode='group', title="Comparaison des Taux d'Insertion et de Stabilit√©",
            labels={'Nom du Cluster': '', 'value': 'Taux Moyen (%)', 'variable': 'M√©trique'},
            color_discrete_map={'taux_insertion': '#1f77b4', 'taux_emploi_stable': '#ff7f0e'}
        )
        fig_rates.update_layout(yaxis_range=[0,100])
        st.plotly_chart(fig_rates, use_container_width=True)

# --- Onglet Pr√©diction ---
with tabs[6]:
    st.header("Data Mining Pr√©dictif : Mod√©lisation par R√©gression")
    st.subheader("Outil de Pr√©diction de Salaire")
    st.markdown(
        "Ce mod√®le **Random Forest** a √©t√© entra√Æn√© pour estimer le salaire "
        "m√©dian d'un dipl√¥m√© en fonction de son grand domaine et de sa r√©gion."
    )
    col1, col2 = st.columns(2)
    with col1:
        pred_region = st.selectbox("Choisissez une R√©gion",
                                   options=sorted(df['region'].unique()))
    with col2:
        pred_domain = st.selectbox("Choisissez un Grand Domaine",
                                   options=sorted(df['grand_domaine'].unique()))
    if st.button("Estimer le salaire"):
        input_data = pd.DataFrame(
            {'grand_domaine': [pred_domain], 'region': [pred_region]}
        )
        predicted_salary = model_regression.predict(input_data)[0]
        st.metric(label="Salaire M√©dian Mensuel Estim√©",
                  value=f"{int(predicted_salary)} ‚Ç¨")

# --- Onglet Exploration ---
with tabs[7]:
    st.header("Exploration des Donn√©es Finales")
    st.dataframe(df_filtered, use_container_width=True, hide_index=True)